[
  {
    "file": "01-title.html",
    "number": 1,
    "title": "Project Flora",
    "content": "<section class=\"slide title-slide active\" data-index=\"1\">\n      <div class=\"logo-container\">\n        <div class=\"logo\"></div>\n      </div>\n      <h1 class=\"main-title\">Project Flora</h1>\n      <h2 class=\"main-subtitle\">The Operating System for Sustainable Landscape Design</h2>\n    </section>",
    "assets": []
  },
  {
    "file": "04-opportunity.html",
    "number": 2,
    "title": "The $180B Opportunity",
    "content": "<section class=\"slide\" data-index=\"2\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">The $180B Opportunity</h1>\n      </div>\n      <div class=\"metrics-grid\">\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">$180B</div>\n          <div class=\"metric-label\">U.S. Landscaping Market</div>\n        </div>\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">$3B‚Üí$5.6B</div>\n          <div class=\"metric-label\">Software Market by 2030</div>\n        </div>\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">700K+</div>\n          <div class=\"metric-label\">U.S. Businesses</div>\n        </div>\n      </div>\n      <ul class=\"bullet-list\" style=\"margin-top: 3rem;\">\n        <li>72% of landscaping businesses have <span class=\"highlight\">fewer than 10 employees</span></li>\n        <li>Post-pandemic <span class=\"highlight\">outdoor living boom</span> driving demand</li>\n        <li>This is the <span class=\"highlight clickable-term\" onclick=\"showAltiumModal()\">Altium vs. OrCAD moment <span class=\"info-icon\">‚ìò</span></span> for landscaping</li>\n      </ul>\n\n      <!-- Modal for Altium explanation -->\n      <div id=\"altiumModal\" class=\"modal-overlay\" onclick=\"hideAltiumModal()\">\n        <div class=\"modal-content\" onclick=\"event.stopPropagation()\">\n          <button class=\"modal-close\" onclick=\"hideAltiumModal()\">√ó</button>\n          <h3 class=\"modal-title\">The Altium vs. OrCAD Story</h3>\n          <div class=\"modal-body\">\n            <p><strong>OrCAD:</strong> Dominant but dated PCB design tool. Powerful but clunky, expensive, steep learning curve.</p>\n            <p><strong>Altium:</strong> Modern alternative with better UX, more intuitive interface, and integrated workflow. Disrupted the market by being more accessible while still professional.</p>\n            <p class=\"modal-highlight\">üéØ <strong>The Parallel:</strong> AutoCAD/Vectorworks are the \"OrCAD\" of landscaping. Flora is positioned to be the \"Altium\" - bringing modern UX and intelligence to an underserved market.</p>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <style>\n      .clickable-term {\n        cursor: pointer;\n        position: relative;\n        border-bottom: 2px dotted var(--accent-primary);\n      }\n\n      .clickable-term:hover {\n        color: var(--accent-glow);\n      }\n\n      .info-icon {\n        font-size: 0.85em;\n        margin-left: 0.25rem;\n        opacity: 0.8;\n      }\n\n      .modal-overlay {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(0, 0, 0, 0.8);\n        backdrop-filter: blur(4px);\n        z-index: 10000;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .modal-overlay.active {\n        display: flex;\n      }\n\n      .modal-content {\n        background: linear-gradient(135deg, var(--bg-gradient-1), var(--bg-secondary));\n        border: 2px solid var(--accent-primary);\n        border-radius: 16px;\n        padding: 2rem;\n        max-width: 600px;\n        width: 90%;\n        box-shadow: var(--shadow-glow), var(--shadow-xl);\n        position: relative;\n        animation: modalSlideIn 0.3s ease;\n      }\n\n      @keyframes modalSlideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-20px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      .modal-close {\n        position: absolute;\n        top: 1rem;\n        right: 1rem;\n        background: transparent;\n        border: none;\n        color: var(--text-primary);\n        font-size: 2rem;\n        cursor: pointer;\n        line-height: 1;\n        padding: 0;\n        width: 32px;\n        height: 32px;\n        border-radius: 50%;\n        transition: all 0.2s;\n      }\n\n      .modal-close:hover {\n        background: var(--accent-primary);\n        color: var(--bg-primary);\n        transform: rotate(90deg);\n      }\n\n      .modal-title {\n        font-family: 'Playfair Display', serif;\n        font-size: 1.8rem;\n        color: var(--accent-glow);\n        margin-bottom: 1.5rem;\n        padding-right: 2rem;\n      }\n\n      .modal-body p {\n        margin-bottom: 1rem;\n        line-height: 1.6;\n        color: var(--text-primary);\n      }\n\n      .modal-body strong {\n        color: var(--accent-primary);\n      }\n\n      .modal-highlight {\n        background: rgba(52, 211, 153, 0.1);\n        border-left: 3px solid var(--accent-primary);\n        padding: 1rem;\n        border-radius: 4px;\n        margin-top: 1.5rem;\n      }\n    </style>\n\n    <script>\n      function showAltiumModal() {\n        document.getElementById('altiumModal').classList.add('active');\n      }\n\n      function hideAltiumModal() {\n        document.getElementById('altiumModal').classList.remove('active');\n      }\n\n      // Close modal on Escape key\n      document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape') {\n          hideAltiumModal();\n        }\n      });\n    </script>",
    "assets": []
  },
  {
    "file": "02-problem.html",
    "number": 3,
    "title": "Current Tools Are Broken",
    "content": "<section class=\"slide\" data-index=\"3\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">Current Tools Are Broken</h1>\n      </div>\n      <div class=\"feature-grid\">\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üèóÔ∏è</div>\n          <div class=\"feature-title\">Pro Tools</div>\n          <div class=\"feature-desc\">AutoCAD, Vectorworks: Powerful but clunky, expensive, and plant-ignorant</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üì±</div>\n          <div class=\"feature-title\">Consumer Apps</div>\n          <div class=\"feature-desc\">iScape, Home Outside: Pretty but shallow ‚Äì basically clip art</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">‚úèÔ∏è</div>\n          <div class=\"feature-title\">Current Reality</div>\n          <div class=\"feature-desc\">Annie does everything manually in Illustrator with no intelligence</div>\n        </div>\n      </div>\n    </section>",
    "assets": []
  },
  {
    "file": "07-solution.html",
    "number": 4,
    "title": "Flora: Intelligence Meets Beauty",
    "content": "<section class=\"slide\" data-index=\"4\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">Flora: Intelligence Meets Beauty</h1>\n      </div>\n      <div class=\"feature-grid\">\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üìç</div>\n          <div class=\"feature-title\">Instant Site Setup</div>\n          <div class=\"feature-desc\">Type address ‚Üí get parcel + imagery instantly</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üåø</div>\n          <div class=\"feature-title\">Plant Intelligence</div>\n          <div class=\"feature-desc\">Native species, zones, spacing ‚Äì built-in ecology</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üé®</div>\n          <div class=\"feature-title\">Beautiful Design</div>\n          <div class=\"feature-desc\">Illustrator feel for outdoor spaces</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üìã</div>\n          <div class=\"feature-title\">Auto Takeoffs</div>\n          <div class=\"feature-desc\">One-click plant lists and sales-ready PDFs</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üéÆ</div>\n          <div class=\"feature-title\">3D Walkthrough</div>\n          <div class=\"feature-desc\">Doom-style exploration of designs</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">ü§ñ</div>\n          <div class=\"feature-title\">AI-Powered</div>\n          <div class=\"feature-desc\">Smart recommendations and plant ID</div>\n        </div>\n      </div>\n    </section>",
    "assets": []
  },
  {
    "file": "05-mvp-demo.html",
    "number": 5,
    "title": "MVP in 4 Simple Steps",
    "content": "<!-- Slide 5: MVP Demo Flow -->\n    <section class=\"slide\" data-index=\"5\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">MVP in 4 Simple Steps</h1>\n      </div>\n      <ul class=\"bullet-list\">\n        <li><span class=\"highlight\">Step 1:</span> Enter address ‚Üí site instantly appears with parcel + aerial</li>\n        <li><span class=\"highlight\">Step 2:</span> Drag & drop native plants with smart filters and spacing</li>\n        <li><span class=\"highlight\">Step 3:</span> Generate branded plant list PDF with counts & species</li>\n        <li><span class=\"highlight\">Step 4:</span> Click to walk through your design in 3D (optional wow)</li>\n      </ul>\n    </section>\n",
    "assets": []
  },
  {
    "file": "06-phase1-overview.html",
    "number": 6,
    "title": "Phase 1: Prove Value with Annie",
    "content": "<!-- Slide 6: Phase 1 Overview -->\n<section class=\"slide\" data-index=\"6\">\n  <div class=\"slide-header\">\n    <h1 class=\"slide-title\">Phase 1: Prove Value with Annie</h1>\n    <div class=\"phase-subtitle\">Validation before vision</div>\n  </div>\n\n  <div class=\"two-column\" style=\"margin-top: 2rem; gap: 3rem;\">\n    <div class=\"left-column\">\n      <h3 style=\"color: var(--accent-primary); margin-bottom: 1.5rem;\">The Goal</h3>\n      <p style=\"font-size: 1.1rem; line-height: 1.7; margin-bottom: 1rem;\">\n        Get Annie's nursery staff <span class=\"highlight\">designing with Flora for real client projects</span> within weeks.\n      </p>\n      <p style=\"color: var(--text-secondary); line-height: 1.6;\">\n        Establish a user feedback loop. Learn which features provide the most value. Prove measurable time savings vs. manual Illustrator workflow.\n      </p>\n    </div>\n\n    <div class=\"right-column\">\n      <h3 style=\"color: var(--accent-primary); margin-bottom: 1.5rem;\">The Constraints</h3>\n      <ul class=\"bullet-list\" style=\"font-size: 0.95rem;\">\n        <li><span class=\"highlight\">Geography:</span> Tampa Bay + Sarasota only</li>\n        <li><span class=\"highlight\">Plants:</span> ~250 species Annie actually sells</li>\n        <li><span class=\"highlight\">Platform:</span> Illustrator plugin (not web app)</li>\n        <li><span class=\"highlight\">Timeline:</span> Weeks to pilot, not months</li>\n      </ul>\n    </div>\n  </div>\n\n  <div style=\"margin-top: 2.5rem; padding: 1.5rem; background: rgba(52, 211, 153, 0.1); border-left: 4px solid var(--accent-primary); border-radius: 8px;\">\n    <p style=\"font-size: 1.05rem; line-height: 1.7; margin: 0;\">\n      <strong style=\"color: var(--accent-primary);\">Why start small?</strong>\n      Risk reduction. We validate the business model and learn what matters <em>before</em> building a massive platform.\n      Annie's feedback guides Phase 2 priorities.\n    </p>\n  </div>\n</section>\n\n<style>\n.two-column {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n}\n\n.phase-subtitle {\n  font-size: 1.1rem;\n  color: var(--text-secondary);\n  margin-top: 0.5rem;\n  font-weight: 400;\n}\n</style>\n",
    "assets": []
  },
  {
    "file": "06a-phase1-data.html",
    "number": 7,
    "title": "Phase 1: GIS & Plant Data",
    "content": "<!-- Slide 6a: Phase 1 - GIS & Data -->\n<section class=\"slide\" data-index=\"6a\">\n  <div class=\"slide-header\">\n    <h1 class=\"slide-title\">Phase 1: GIS & Plant Data</h1>\n    <div class=\"phase-subtitle\">Tampa Bay + Sarasota region</div>\n  </div>\n\n  <div class=\"feature-grid\" style=\"margin-top: 2rem;\">\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üìç</div>\n      <div class=\"feature-title\">Regional GIS Pipeline</div>\n      <div class=\"feature-desc\">Tampa Bay + Sarasota parcels ‚Ä¢ Local aerial imagery ‚Ä¢ Soil data ‚Ä¢ Working pipeline for pilot region</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üåø</div>\n      <div class=\"feature-title\">Curated Plant Database</div>\n      <div class=\"feature-desc\">~250 Florida native species ‚Ä¢ Plants Annie actually sells ‚Ä¢ Enough variety for real designs</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üå±</div>\n      <div class=\"feature-title\">Plant Intelligence</div>\n      <div class=\"feature-desc\">Growth data ‚Ä¢ Spacing requirements ‚Ä¢ Sun/water needs ‚Ä¢ Native status ‚Ä¢ Zone compatibility</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üíß</div>\n      <div class=\"feature-title\">Local Conditions</div>\n      <div class=\"feature-desc\">Florida soil types ‚Ä¢ Rainfall patterns ‚Ä¢ Hardiness zones ‚Ä¢ Regional climate data</div>\n    </div>\n  </div>\n\n  <div style=\"margin-top: 2.5rem; text-align: center; color: var(--accent-primary); font-weight: 600; font-size: 1rem;\">\n    Focus on what Annie needs for her customers, not comprehensive coverage\n  </div>\n</section>\n",
    "assets": []
  },
  {
    "file": "06b-phase1-features.html",
    "number": 8,
    "title": "Phase 1: Core Features",
    "content": "<!-- Slide 6b: Phase 1 - Core Features -->\n<section class=\"slide\" data-index=\"6b\">\n  <div class=\"slide-header\">\n    <h1 class=\"slide-title\">Phase 1: Core Features</h1>\n    <div class=\"phase-subtitle\">Illustrator plugin, not web app</div>\n  </div>\n\n  <div class=\"feature-grid\" style=\"margin-top: 2rem;\">\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üé®</div>\n      <div class=\"feature-title\">GIS Import Button</div>\n      <div class=\"feature-desc\">Type address ‚Üí parcel + aerial imagery appears in Illustrator ‚Ä¢ Scaled correctly ‚Ä¢ Ready to design</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">ü™¥</div>\n      <div class=\"feature-title\">Plant Picker Panel</div>\n      <div class=\"feature-desc\">Browse/filter 250 plants ‚Ä¢ Drag & drop placement ‚Ä¢ Smart filters (sun, water, native status)</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üìê</div>\n      <div class=\"feature-title\">Basic Layout Tools</div>\n      <div class=\"feature-desc\">Grid placement ‚Ä¢ Along-path planting ‚Ä¢ Simple area fills ‚Ä¢ Spacing helpers</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üìã</div>\n      <div class=\"feature-title\">Plant Schedule Export</div>\n      <div class=\"feature-desc\">One-click BOM generation ‚Ä¢ Counts by species ‚Ä¢ PDF export ‚Ä¢ Ready for nursery orders</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">‚úì</div>\n      <div class=\"feature-title\">Basic Validation</div>\n      <div class=\"feature-desc\">Spacing warnings ‚Ä¢ Overlap detection ‚Ä¢ Simple growth preview</div>\n    </div>\n\n    <div class=\"feature-card\">\n      <div class=\"feature-icon\">üîÑ</div>\n      <div class=\"feature-title\">Plant Data Sync</div>\n      <div class=\"feature-desc\">Offline-first ‚Ä¢ Background updates ‚Ä¢ Cached for speed</div>\n    </div>\n  </div>\n\n  <div style=\"margin-top: 2.5rem; text-align: center; color: var(--accent-primary); font-weight: 600; font-size: 1rem;\">\n    Augment Annie's existing Illustrator workflow, don't replace it\n  </div>\n</section>\n",
    "assets": []
  },
  {
    "file": "06c-phase1-npr.html",
    "number": 9,
    "title": "Phase 1: Hand-Drawn 2.5D Preview",
    "content": "<!-- Slide 6c: Phase 1 - NPR Preview -->\n<section class=\"slide\" data-index=\"6c\">\n  <div class=\"slide-header\">\n    <h1 class=\"slide-title\">Phase 1: Hand-Drawn 2.5D Preview</h1>\n    <div class=\"phase-subtitle\">The \"wow factor\" - artist's sketch aesthetic</div>\n  </div>\n\n  <div class=\"two-column\" style=\"margin-top: 2rem; gap: 3rem;\">\n    <div class=\"left-column\">\n      <h3 style=\"color: var(--accent-primary); margin-bottom: 1.5rem;\">The Vision</h3>\n      <p style=\"font-size: 1.05rem; line-height: 1.7; margin-bottom: 1.5rem;\">\n        Walk through the design in 3D with a <span class=\"highlight\">hand-drawn sketch aesthetic</span> -\n        like an architect's illustration come to life.\n      </p>\n\n      <ul class=\"bullet-list\" style=\"font-size: 0.95rem;\">\n        <li><span class=\"highlight\">Sprite-based plants</span> - Simple \"cardboard cutout\" style</li>\n        <li><span class=\"highlight\">Procedural pencil shaders</span> - GLSL sketch effects</li>\n        <li><span class=\"highlight\">Basic terrain</span> - Flat or simple elevation</li>\n        <li><span class=\"highlight\">First-person walk</span> - Explore the design</li>\n      </ul>\n\n      <p style=\"margin-top: 1.5rem; color: var(--text-secondary); font-size: 0.9rem; font-style: italic;\">\n        Note: This is optional for Phase 1. If Annie's team values the 2D tools more, we focus there first.\n      </p>\n    </div>\n\n    <div class=\"right-column\" style=\"background: rgba(52, 211, 153, 0.05); border: 1px solid var(--accent-primary); border-radius: 12px; padding: 1.5rem; display: flex; flex-direction: column; justify-content: center; align-items: center;\">\n      <h4 style=\"color: var(--accent-primary); margin-bottom: 1rem;\">Live Shader Demo</h4>\n      <div style=\"position: relative; width: 100%; aspect-ratio: 1; max-width: 400px; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\">\n        <canvas id=\"nprShaderCanvas\" style=\"width: 100%; height: 100%; display: block;\"></canvas>\n      </div>\n      <p style=\"text-align: center; color: var(--text-secondary); font-size: 0.85rem; margin-top: 1rem;\">\n        <em>Procedural colored pencil sketch rendering</em>\n      </p>\n    </div>\n  </div>\n\n  <div style=\"margin-top: 2.5rem; padding: 1.5rem; background: rgba(255, 193, 7, 0.1); border-left: 4px solid #ffc107; border-radius: 8px;\">\n    <p style=\"font-size: 0.95rem; line-height: 1.6; margin: 0;\">\n      <strong style=\"color: #ffc107;\">Why this aesthetic?</strong>\n      Differentiates from competitors' clinical 3D renderings. Aligns with landscape architecture presentation style.\n      Performant enough for real-time on modest hardware. Makes designs feel artistic, not robotic.\n    </p>\n  </div>\n</section>\n\n<style>\n.two-column {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n}\n\n.phase-subtitle {\n  font-size: 1.1rem;\n  color: var(--text-secondary);\n  margin-top: 0.5rem;\n  font-weight: 400;\n}\n</style>\n\n<script>\n// Initialize NPR shader demo when slide is visible\nlet shaderInitialized = false;\nfunction initShader() {\n  if (shaderInitialized) {\n    console.log('Shader already initialized, skipping');\n    return;\n  }\n\n  const canvas = document.getElementById('nprShaderCanvas');\n  if (!canvas) {\n    console.error('Canvas not found!');\n    return;\n  }\n  console.log('Initializing shader on canvas:', canvas);\n  shaderInitialized = true;\n\n  const gl = canvas.getContext('webgl2');\n  if (!gl) {\n    console.error('WebGL 2.0 not supported - falling back to WebGL 1.0');\n    const gl1 = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (!gl1) {\n      console.error('WebGL not supported at all');\n      canvas.getContext('2d').fillText('WebGL not supported', 50, 50);\n      return;\n    }\n    console.error('This shader requires WebGL 2.0');\n    return;\n  }\n  console.log('Using WebGL 2.0');\n\n  // Set canvas size to match display size\n  const rect = canvas.getBoundingClientRect();\n  const size = Math.min(rect.width, rect.height) || 512;\n  canvas.width = size;\n  canvas.height = size;\n\n  console.log('Canvas size:', canvas.width, 'x', canvas.height);\n\n  // Vertex shader (standard quad) - WebGL 2.0 / GLSL ES 3.00\n  const vertexShaderSource = `#version 300 es\nin vec2 position;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\n  // Fragment shader loaded from external file\n  // IMPORTANT: No whitespace before #version directive\n  const fragmentShaderSource = `#version 300 es\nprecision highp float;\nuniform vec2 iResolution;\nuniform float iTime;\n\nout vec4 fragColor;\n\n// Common helper functions from common.glsl\n\n// Hexagon vertices (from common.glsl)\nvec2[6] vID = vec2[6](vec2(-.5, -2./6.)/vec2(.5, 1), vec2(-.5, 2./6.)/vec2(.5, 1), vec2(0, 2./3.)/vec2(.5, 1),\n                      vec2(.5, 2./6.)/vec2(.5, 1), vec2(.5, -2./6.)/vec2(.5, 1), vec2(0, -2./3.)/vec2(.5, 1));\n\n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n// IQ's vec2 to float hash.\nfloat hash21(vec2 p){\n    return fract(sin(mod(dot(p, vec2(27.619, 57.583)), 6.2831589))*43758.5453);\n}\n\n// Compact, self-contained version of IQ's 2D value noise function.\nfloat n2D(vec2 p){\n    const vec2 s = vec2(1, 113);\n    vec2 ip = floor(p); p -= ip;\n    vec4 h = vec4(0., s.x, s.y, s.x + s.y) + dot(ip, s);\n    p = p*p*(3. - 2.*p);\n    h = fract(sin(mod(h, 6.2831589))*43758.5453);\n    h.xy = mix(h.xy, h.zw, p.y);\n    return mix(h.x, h.y, p.x);\n}\n\n// FBM -- 4 accumulated noise layers of modulated amplitudes and frequencies.\nfloat fbm(vec2 p){ return n2D(p)*.533 + n2D(p*2.)*.267 + n2D(p*4.)*.133 + n2D(p*8.)*.067; }\n\n// This will draw a box (no caps) of width \"ew\" from point \"a \"to \"b\".\nfloat lBox(vec2 p, vec2 a, vec2 b, float ew){\n    float ang = atan(b.y - a.y, b.x - a.x);\n    p = rot2(ang)*(p - mix(a, b, .5));\n   vec2 l = vec2(length(b - a), ew);\n   vec2 d = abs(p) - (l + ew)/2.;\n   return min(max(d.x, d.y), 0.) + length(max(d, 0.));\n}\n\n// IQ's distance to a regular polygon - takes array like ShaderToy\nfloat sdPoly4(in vec2 p, in vec2[4] v){\n    float d = dot(p - v[0], p - v[0]);\n    float s = 1.0;\n\n    int j = 3;\n    for(int i = 0; i < 4; i++){\n        vec2 e = v[j] - v[i];\n        vec2 w = p - v[i];\n        vec2 b = w - e*clamp(dot(w, e)/dot(e, e), 0., 1.);\n        d = min(d, dot(b,b));\n\n        bvec3 cond = bvec3(p.y >= v[i].y, p.y < v[j].y, e.x*w.y > e.y*w.x);\n        if(all(cond) || all(not(cond))) s *= -1.0;\n        j = i;\n    }\n    return s*sqrt(d);\n}\n\n// Signed distance to a regular hexagon\nfloat sdHexagon(in vec2 p, in float r){\n    const vec3 k = vec3(-.8660254, .5, .57735);\n    p = abs(p);\n    p -= 2.*min(dot(k.xy, p), 0.)*k.xy;\n    return length(p - vec2(clamp(p.x, -k.z*r, k.z*r), r))*sign(p.y - r);\n}\n\nvec3 pencil(vec3 col, vec2 p){\n    vec2 q = p*4.;\n    const vec2 sc = vec2(1, 12);\n    q += (vec2(n2D(q*4.), n2D(q*4. + 7.3)) - .5)*.03;\n    q *= rot2(-3.14159/2.5);\n    col = min(col, 1.);\n    float gr = (dot(col, vec3(.299, .587, .114)));\n    float ns = (n2D(q*sc)*.66 + n2D(q*2.*sc)*.34);\n    q *= rot2(3.14159/2.);\n    float ns2 = (n2D(q*sc)*.66 + n2D(q*2.*sc)*.34);\n    q *= rot2(-3.14159/5.);\n    float ns3 = (n2D(q*sc)*.66 + n2D(q*2.*sc)*.34);\n    const float contrast = 1.;\n    ns = (.5 + (gr - (max(max(ns, ns2), ns3)))*contrast);\n    return vec3(clamp(ns, 0., 1.));\n}\n\n// Main cube-circle shader (from ShaderToy)\n/*\n\t\n\tCube Circle Sketch\n\t------------------\n\n\tI see a lot of really classy geometric styled pencil drawings on \n    the internet by various mathematical artists -- The effort that \n    goes into some of them is really impressive. Reproducing them in \n    code form is kind of cheating, but it's a little hard to resist. :)\n\n\tThis particular arrangement is pretty common and something I've \n    seen many times in various forms, but most tend to be based off of \n    the works of mathematical artist Regolo Bizzi -- His Escheresque\n    geometric designs are everywhere, but if you've never chanced upon \n    one of them, I've provided a link below. A lot of love and effort \n    would have gone into the original sketch, but the effort that went\n    into the code version was far less impressive: Render 12 hexagons \n    on the border of a circle, orient them a bit (by PI/6), then shade \n    the faces. \n    \n    There's some extra code to give it that tech drawing feel, fake \n    lighting and a mediocre sketch algorithm included, but that's it.\n\n\tAnyway, I was more interested in producing a halfway passable look\n\tin order to render more interesting patterns. Suggestions for \n\tsimple improvements are always welcome. :)\n\n\n\n    // Links.\n\n    // You can find some of Regolo Bizzi's work at the following:\n    http://impossible-world.blogspot.com/2014/10/new-images-by-regolo-bizzi.html\n    https://www.behance.net/regolo\n\n*/\n\n\n// Cube subdivision lines. Interesting, but a bit much, I think. :)\n//#define SUBDIV_LINES \n\n// Greyscale sketch -- Sans color.\n//#define GREYSCALE\n\n// Blinking lights: It was an attempt to animate the sketch in a believable\n// way... This isn't it. :D\n//#define BLINKING_LIGHTS\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Aspect correct screen coordinates.\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n    // Scaling and translation.\n    const float gSc = 1.;\n    \n    // Smoothing factor.\n    float sf = gSc/iResolution.y;\n    \n    // Rotation speed -- Rotation seemed like a good idea at the time, but\n    // I decided against it. :)\n    float rT = 0.;//sin(-iTime/6.*3.)/12.;\n\n    // Scaling and rotation.\n    vec2 p = rot2(rT)*uv*gSc;\n    \n    // Distance field holders for the cubes, lines and the previous\n    // cube (used for CSG related to overlap).\n    float d = 1e5, ln = 1e5, prevD = 1e5; \n    \n    // Edge width. \n    const float ew = .0025;\n    \n   \n    // The cubes are rendered along the sides of a dodecahedron. These are just some standard\n    // measurements to help place the cubes in the correct positions.\n    //\n    const float cR = .3; // Larger circle radius.\n    const float cAp = cR*cos(6.2831/24.); // Apothem.\n    const float sL = cR*acos(6.2831/24.)/2.; // Side length, which will relate to the hexagon scale.\n    \n    \n        // The offset vertex information.\n    // Hexagon vertices with scaling to enable rendering back in normal space. \n    vec2 hSc = sL*vec2(.5, .8660254);\n    vec2[6] svV = vec2[6](vID[0]*hSc, vID[1]*hSc, vID[2]*hSc, vID[3]*hSc, vID[4]*hSc, vID[5]*hSc);\n\n   \n    // Coordinate perturbation. There's small rigid one to enhance the hand-drawn look, and\n    // a larger animated one to wave the paper around a bit.\n    vec2 offs = vec2(fbm(p*16.), fbm(p*16. + .35));\n    vec2 offs2 = vec2(fbm(p*1. + iTime/4.), fbm(p*1. + .5 + iTime/4.));\n    const float oFct = .007;\n    const float oFct2 = .05;\n    p -= (offs - .5)*oFct;\n    p -= (offs2 - .5)*oFct2;\n    \n \n    \n    \n    float lnL = -cR - sL*.75; // Line length.\n    float a0 = 6.2831/24.; // Initial reference angle.\n    float dA = 6.2831/12.; // One twelth revolution.\n    float inR =  cR - sL/2.*.8660254; // Inner radius. \n    \n    \n    // Some distance field holders.\n    float gHex = 1e5, gD = 1e5, qLn = 1e5, dSh = 1e5;\n    // Z buffer, for shadows.\n    float zBuf = 0.;\n    \n    \n    \n    // Fake lighting.\n    vec3 lp = vec3(-.75, 3, -1.5);\n    vec3 ld = normalize(lp - vec3(uv, 0)); \n    ld.xy = rot2(rT)*ld.xy;\n    \n    \n    // Initialize the background.\n    vec3 col = vec3(.95, .975, 1);\n    \n    \n    vec2 q; \n    \n    // Apply some graph lines.\n    float dim = 9.; // For the lines to match up: dim = 9./(cR*3.);\n    q = p;//uv*gSc - (offs - .5)*oFct  - (offs2 - .5)*oFct2;//uv*gSc - (offs - .5)*oFct;//p;//\n    q = abs(mod(q, 1./dim) - .5/dim);\n    float ln3 = abs(max(q.x, q.y) - .5/dim);\n    col = mix(col, vec3(.35, .65, 1), (1. - smoothstep(0., sf*2., ln3))*.8);\n    dim *= 2.;\n    q = p;//uv*gSc - (offs - .5)*oFct  - (offs2 - .5)*oFct2;//uv*gSc - (offs - .5)*oFct;//p;//\n    q = abs(mod(q, 1./dim) - .5/dim);\n    ln3 = max(abs(max(q.x, q.y) - .5/dim), -ln3);\n    col = mix(col, vec3(.35, .65, 1), (1. - smoothstep(0., sf*2., ln3))*.65);\n    \n    // Applying light and a bit of noise to the background.\n    col *= clamp(dot(normalize(vec3(p, -1.5)), ld), 0., 1.)*.2 + .8;\n    col *= fbm(p*8.)*.1 + .9;\n    \n    \n    // Produce and render the 12 cubes. This is pretty standard stuff -- Position\n    // the cubes and render three rhomboids for the cube faces.\n    \n    // Cube face normals.\n    vec3[3] n = vec3[3](vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, -1));\n       \n\n    // Iterate through all 12 cubes -- Some will note that you could apply polar\n    // coordinates and cut this right down to two iterations, which would definitely\n    // be faster. However, the example isn't too taxing on the system, and the\n    // brute force method simplifies the code a bit... Having said that, I might\n    // cave in an update this later. :)\n    //\n    for(int i = 0; i<12; i++){\n        \n        q = p;\n        \n        // Grey lines point to point lines.\n        vec2 a, b, nA;\n        a =  rot2(a0 + dA*float(i))*vec2(0, inR);\n        b =  rot2(a0 + dA*float(i + 3))*vec2(0, inR);\n        nA = normalize(b - a)*sL*1.6;\n        ln = min(ln, lBox(q, a - nA, b + nA, 0.));\n        \n        \n        // Hexagons.\n        vec2 hCtr = rot2(6.2831/12.*float(11 - i))*vec2(0, cR); // Hexagon center.\n        q -= hCtr; // Move to the border.\n        q = rot2(-6.2831/12.*float(11 - i))*q; // Rotate in situ.\n        //q = rot2(iTime/3.)*q; // Rotate individual hexagons.\n        float dH = sdHexagon(q, sL/2.); // Hexagon distance field.\n        d = dH;\n        \n        // Hexagon or cube shadows.\n        vec2 qSh = p + ld.xy*.03;\n        qSh -= hCtr;\n        qSh = rot2(-6.2831/12.*float(11 - i))*qSh;\n        dSh = sdHexagon(qSh, sL/2.);\n        \n        // All hexagons.\n        gHex = min(gHex, d);\n        \n        // Grey hexagon circle outlines.\n        ln = min(ln, abs(length(q) - sL/2./.8660254));\n        \n        // Cutting out the previous hexagon to avoid overlap. A Z-buffer would\n        // also work, and might be cleaner, but it's done now. :)\n        d = max(d, -(prevD - ew/3.));\n        \n        prevD = d; \n        \n        // Shadow and shadow buffer -- Needs fixing, but it'll do for now.\n        col = mix(col, mix(vec3(0), col, zBuf), (1. - smoothstep(0., sf*5., dSh - ew/2.))*.35);\n        zBuf = mix(zBuf, 1., (1. - smoothstep(0., sf*5., dSh - ew/2.))); \n  \n        // Combination of all objects... It was used to rotate things in combination with\n        // the sketch algorithm, but I decided against it.\n        gD = min(gD, min(min(ln, d), dSh));\n        \n        // Rendering the hexagon base -- Not entirely necessary, but it enhance the edges.\n        col = mix(col, vec3(0), (1. - smoothstep(0., sf*6., d - ew/2.))*.35); // Fake AO.\n        col = mix(col, vec3(0), (1. - smoothstep(0., sf, d - ew/2.))*.8);\n        //col = mix(col, vec3(1), (1. - smoothstep(0., sf, d + ew - ew/2.)));\n          \n          \n             \n        // Iterate through the three cube faces.\n        for(int j = 0; j<6; j+=2){\n        \n            // Constructing the edge midpoints and normals at those\n            // points for both the string and corresponding shadows.\n            vec2[4] v = vec2[4](svV[(j + 1)%6].yx, svV[(j + 2)%6].yx, svV[(j + 3)%6].yx, vec2(0));\n\n            // Quad center and local quad ID.\n            vec2 qCtr = (v[0] + v[1] + v[2] + v[3])/4.;\n            vec2 qID = hCtr + qCtr;\n            \n            // Face quad.\n            float quad = max(sdPoly4(q, v), d);\n            \n            // Accumulated quad field.\n            gD = min(gD, quad);\n            \n            // Spectrum or rainbow colors.\n            vec3 rnbCol = .6 + .4*cos(6.2831*float(i)/12. + vec3(0, 1, 2)*1.5 + 3.14159/6.);\n            \n            #ifdef BLINKING_LIGHTS\n            float rndI = hash21(hCtr); rndI = cos(rndI*6.2831 + iTime/1.25 + .5);\n            rndI = smoothstep(.9, .95, sin(rndI*6.2831 + iTime*3.)*.5 + .5);\n            \n            vec3 rCol = vec3(.55) + float(i%3)/12.;//vec3(hash21(hCtr + .6)*.35 + .5);\n            rCol = mix(rCol, dot(rCol, vec3(.299, .587, .114))*vec3(4, 1, .5), rndI);\n            rCol = mix(rCol, rCol.xzy, sin(hash21(hCtr + .44)*6.2831 + iTime)*.35 + .35);\n            \n            // Alternative.\n            //vec3 rCol = rnbCol;\n            //rCol = mix(rCol, rnbCol*1.5, rndI);\n            #else\n            vec3 rCol = rnbCol;\n            #endif\n            \n  \n            // Face normal.\n            vec3 sn = n[j/2];\n            // Rotate the face normals about the XY axis -- Since this isn't 3D, we\n            // need to fake it.\n            sn.xy = rot2(6.2831/12.*float(11 - i))*sn.xy;\n             \n            // Using the quad distance field for a bit of shading. In this case, it\n            // gives the cubes a subtle faux ambient occulsion feel.\n            float sh = clamp(.35 - quad/.03, 0., 1.)*.3 + .7;\n            // Standard diffuse lighting.\n            float dif = max(dot(ld, sn), 0.);\n            // Lit face color.\n            rCol = rCol*(dif + .5)*sh;\n            \n            // Render the face quad.\n            col = mix(col, rCol*.5, (1. - smoothstep(0., sf, quad)));\n            col = mix(col, vec3(rCol), (1. - smoothstep(0., sf, quad + ew)));\n            \n            #ifdef SUBDIV_LINES\n            // Quad lines -- Not used.\n            \n            qLn = lBox(q, mix(v[0], v[1], .5), mix(v[2], v[3], .5), .0);\n            qLn = min(qLn, lBox(q, mix(v[1], v[2], .5), mix(v[3], v[0], .5), .0));\n            /*         \n            qLn = lBox(q, mix(v[0], v[1], .333), mix(v[2], v[3], .666), .0);\n            qLn = min(qLn, lBox(q, mix(v[1], v[2], .333), mix(v[3], v[0], .666), .0));\n            qLn = min(qLn, lBox(q, mix(v[0], v[1], .666), mix(v[2], v[3], .333), .0));\n            qLn = min(qLn, lBox(q, mix(v[1], v[2], .666), mix(v[3], v[0], .333), .0));\n            */\n            qLn = max(qLn, (prevD - ew/3.));\n            \n            vec3 svCol = col;\n            col = mix(col, col*1.35, (1. - smoothstep(0., sf*3., qLn - .003)));\n            col = mix(col, svCol*.65, (1. - smoothstep(0., sf*2., qLn - .001)));\n            #endif\n        }\n        \n         \n    }\n    \n\n    // Faking the ruled guide lines. We'll make them more pronounced outside the colored\n    // cubes and faint over the top.\n    float lAlpha = mix(.25, .125, 1. - smoothstep(0., sf*2., gHex));\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf*2., ln - .001*fbm(p*32. + .5)))*lAlpha);\n    // IQ's suggestion to let a trace amount of the graph paper pattern show through.\n    // The graph paper was a later addition, so I'd forgotten to include it.\n    col = mix(col, vec3(.35, .65, 1)/4., (1. - smoothstep(0., sf*2., max(gHex, ln3)))*.25);\n    \n    \n \n    // Subtle pencil overlay... It's cheap and definitely not production worthy,\n    // but it works well enough for the purpose of the example. The idea is based\n    // off of one of Flockaroo's examples.\n    q = p*8.;//mix(p*10., uv*gSc*10. - (offs - .5)*oFct  - (offs2 - .5)*oFct2, smoothstep(0., sf, gD));\n    vec3 colP = pencil(col, q*iResolution.y/450.);\n    #ifdef GREYSCALE\n    // Just the pencil sketch. The last factor ranges from zero to one and \n    // determines the sketchiness of the rendering... Pun intended. :D\n    col = mix(dot(col, vec3(.299, .587, .114))*vec3(1), colP, .6);\n    #else\n    col = mix(col, 1. - exp(-(col*2.)*(colP + .25)), .85); \n    #endif\n    //col = mix(col, colP, .5);\n    //col = mix(min(col, colP), max(col, colP), .5); \n   \n  \n     // Cheap paper grain... Also barely worth the effort. :)\n    vec2 pp = q;//floor(q*1024.);\n    vec3 rn3 = vec3(hash21(pp), hash21(pp + 2.37), hash21(pp + 4.83));\n    vec3 pg = .8 + (rn3.xyz*.35 + rn3.xxx*.65)*.4;\n    col *= min(pg, 1.); \n    \n    \n    // Rough gamma correction and output to screen.\n    fragColor = vec4(sqrt(max(col, 0.)), 1);\n}\n\nvoid main() {\n    mainImage(fragColor, gl_FragCoord.xy);\n}\n`;\n\n  // Compile shaders\n  function compileShader(source, type) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error('Shader compile error:', gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return null;\n    }\n    return shader;\n  }\n\n  const vertexShader = compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n  const fragmentShader = compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n\n  if (!vertexShader || !fragmentShader) return;\n\n  // Link program\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.error('Program link error:', gl.getProgramInfoLog(program));\n    return;\n  }\n\n  gl.useProgram(program);\n\n  // Setup geometry (fullscreen quad)\n  const positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n    -1, -1,\n     1, -1,\n    -1,  1,\n     1,  1\n  ]), gl.STATIC_DRAW);\n\n  const positionLocation = gl.getAttribLocation(program, 'position');\n  gl.enableVertexAttribArray(positionLocation);\n  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n  // Set viewport\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  console.log('Viewport set to:', canvas.width, 'x', canvas.height);\n\n  // Get uniform locations (MUST be done AFTER useProgram and BEFORE first render)\n  // Note: Must ensure program is current before getting locations\n  gl.useProgram(program);\n\n  const iResolutionLocation = gl.getUniformLocation(program, 'iResolution');\n  const iTimeLocation = gl.getUniformLocation(program, 'iTime');\n\n  console.log('Uniform locations:', {\n    iResolution: iResolutionLocation,\n    iTime: iTimeLocation\n  });\n\n  // Verify uniforms were found (null or -1 means not found)\n  if (!iResolutionLocation || iResolutionLocation === -1) {\n    console.error('Could not find uniform: iResolution');\n  }\n  if (!iTimeLocation || iTimeLocation === -1) {\n    console.error('Could not find uniform: iTime');\n  }\n\n  // Render loop\n  let startTime = Date.now();\n  function render() {\n    const currentTime = (Date.now() - startTime) / 1000.0;\n\n    // Only set uniforms if locations are valid\n    if (iResolutionLocation && iResolutionLocation !== -1) {\n      gl.uniform2f(iResolutionLocation, canvas.width, canvas.height);\n    }\n    if (iTimeLocation && iTimeLocation !== -1) {\n      gl.uniform1f(iTimeLocation, currentTime);\n    }\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    requestAnimationFrame(render);\n  }\n\n  console.log('Starting render loop');\n  render();\n}\n\n// Try to initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initShader);\n} else {\n  initShader();\n}\n\n// Also try again on window load\nwindow.addEventListener('load', function() {\n  const canvas = document.getElementById('nprShaderCanvas');\n  if (canvas && !canvas.getContext('webgl')) {\n    initShader();\n  }\n});\n</script>\n",
    "assets": []
  },
  {
    "file": "07-tech-approach.html",
    "number": 10,
    "title": "Built for Scale",
    "content": "<!-- Slide 7: Tech Approach -->\n    <section class=\"slide\" data-index=\"7\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">Built for Scale</h1>\n      </div>\n      <div class=\"feature-grid\">\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">‚ö°</div>\n          <div class=\"feature-title\">Babylon.js Core</div>\n          <div class=\"feature-desc\">Unified 2D/3D rendering with orthographic camera</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üó∫Ô∏è</div>\n          <div class=\"feature-title\">GIS Integration</div>\n          <div class=\"feature-desc\">GeoTIFFs, KMLs, parcel APIs, elevation data</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üì±</div>\n          <div class=\"feature-title\">Progressive Web App</div>\n          <div class=\"feature-desc\">Works everywhere, offline-capable</div>\n        </div>\n      </div>\n    </section>\n",
    "assets": []
  },
  {
    "file": "08-business-model.html",
    "number": 11,
    "title": "Multiple Revenue Streams",
    "content": "<!-- Slide 8: Business Model -->\n    <section class=\"slide\" data-index=\"8\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">Multiple Revenue Streams</h1>\n      </div>\n      <ul class=\"bullet-list\">\n        <li><span class=\"highlight\">Freemium SaaS:</span> Free tier ‚Üí Pro at $20-50/month</li>\n        <li><span class=\"highlight\">White Label:</span> Branded exports for nursery partners</li>\n        <li><span class=\"highlight\">Affiliate Revenue:</span> Integration with suppliers (Home Depot, local nurseries)</li>\n        <li><span class=\"highlight\">Future Expansion:</span> Full proposals with cost estimation</li>\n      </ul>\n    </section>\n",
    "assets": []
  },
  {
    "file": "05-tipping-point.html",
    "number": 12,
    "title": "Perfect Timing",
    "content": "<section class=\"slide\" data-index=\"9\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">Perfect Timing</h1>\n      </div>\n      <div class=\"feature-grid\">\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üè°</div>\n          <div class=\"feature-title\">Outdoor Living Boom</div>\n          <div class=\"feature-desc\">Post-pandemic shift to home improvement</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">üå±</div>\n          <div class=\"feature-title\">Sustainability Push</div>\n          <div class=\"feature-desc\">Regulations favor native plants & water conservation</div>\n        </div>\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">‚òÅÔ∏è</div>\n          <div class=\"feature-title\">Cloud + AI Ready</div>\n          <div class=\"feature-desc\">Small teams can now build magic quickly</div>\n        </div>\n      </div>\n    </section>",
    "assets": []
  },
  {
    "file": "11-team.html",
    "number": 13,
    "title": "The Perfect Team",
    "content": "<section class=\"slide\" data-index=\"10\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">The Perfect Team</h1>\n      </div>\n      <div class=\"team-grid\">\n        <div class=\"team-member\">\n          <div class=\"member-avatar\">üó∫Ô∏è</div>\n          <div class=\"member-name\">Geoff</div>\n          <div class=\"member-role\">Technical Lead<br>GIS + CAD + Full-Stack Engineering</div>\n        </div>\n        <div class=\"team-member\">\n          <div class=\"member-avatar\">üå∫</div>\n          <div class=\"member-name\">Annie</div>\n          <div class=\"member-role\">Design & Domain Expert<br>Nursery owner + customer validation</div>\n        </div>\n      </div>\n      <p style=\"text-align: center; margin-top: 2rem; color: var(--text-secondary);\">\n        Technical expertise ‚Ä¢ Domain knowledge ‚Ä¢ Customer access\n      </p>\n    </section>",
    "assets": []
  },
  {
    "file": "11-traction.html",
    "number": 14,
    "title": "Path to Launch",
    "content": "<!-- Slide 11: Traction -->\n    <section class=\"slide\" data-index=\"11\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">Path to Launch</h1>\n      </div>\n      <ul class=\"bullet-list\">\n        <li><span class=\"highlight\">Completed:</span> Full technical architecture designed & prototyped</li>\n        <li><span class=\"highlight\">Working now:</span> GIS pipeline processing real parcels ‚Ä¢ NPR shaders rendering</li>\n        <li><span class=\"highlight\">In progress:</span> Illustrator UXP plugin with plant layout algorithms</li>\n        <li><span class=\"highlight\">Next 3 months:</span> Annie pilot program with nursery customers</li>\n        <li><span class=\"highlight\">Unfair advantage:</span> Solved the hard technical problems that keep competitors stuck</li>\n      </ul>\n    </section>\n",
    "assets": []
  },
  {
    "file": "12-vision.html",
    "number": 15,
    "title": "The Vision",
    "content": "<!-- Slide 12: Vision -->\n    <section class=\"slide\" data-index=\"12\">\n      <div class=\"slide-header\">\n        <h1 class=\"slide-title\">The Vision</h1>\n      </div>\n      <div class=\"slide-content\">\n        <p style=\"font-size: 1.4rem; line-height: 1.8; margin-bottom: 2rem;\">\n          Flora will be the <span class=\"highlight\">operating system for sustainable landscape design</span>.\n        </p>\n        <p style=\"color: var(--text-secondary); margin-bottom: 2rem;\">\n          By uniting instant site data, ecological intelligence, and delightful design, we'll enable small businesses and homeowners to create outdoor spaces that are beautiful, resilient, and ecologically sound.\n        </p>\n        <p style=\"color: var(--text-secondary);\">\n          Long-term: From plant lists to full proposals. From individual yards to urban-scale ecological planning.\n        </p>\n      </div>\n    </section>\n",
    "assets": []
  },
  {
    "file": "13-call-to-action.html",
    "number": 16,
    "title": "Let's Build This",
    "content": "<!-- Slide 13: Call to Action -->\n    <section class=\"slide title-slide\" data-index=\"13\">\n      <h1 class=\"main-title\">Let's Build This</h1>\n      <h2 class=\"main-subtitle\">The foundation is built. Time to launch.</h2>\n      <div style=\"margin-top: 3rem;\">\n        <ul class=\"bullet-list\" style=\"text-align: left; display: inline-block;\">\n          <li><span class=\"highlight\">Proven technology stack</span> ‚Äì Illustrator plugin + GIS pipeline working</li>\n          <li><span class=\"highlight\">Domain expertise</span> ‚Äì Annie's nursery customers ready to pilot</li>\n          <li><span class=\"highlight\">Technical execution</span> ‚Äì Complex rendering and geometry algorithms solved</li>\n          <li><span class=\"highlight\">Clear path to revenue</span> ‚Äì SaaS + nursery partnerships</li>\n        </ul>\n      </div>\n    </section>\n",
    "assets": []
  }
]